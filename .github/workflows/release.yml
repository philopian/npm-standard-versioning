name: Auto Release
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Get release type from labels
        id: release-type
        run: |
          RELEASE_TYPE="patch"  # Default
          if ${{ contains(github.event.pull_request.labels.*.name, 'major') }}; then
            RELEASE_TYPE="major"
          elif ${{ contains(github.event.pull_request.labels.*.name, 'minor') }}; then
            RELEASE_TYPE="minor"
          fi
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
      
      - name: Release with standard-version
        run: |
          npm run release -- --release-as ${{ steps.release-type.outputs.RELEASE_TYPE }} --no-verify
      
      - name: Get new version
        id: version
        run: |
          NEW_VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
      
      - name: Extract changelog for the current version
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.NEW_VERSION }}
          # Extract the content between the current version header and the next version header
          CHANGELOG_CONTENT=$(awk -v version="## \\[$VERSION\\]" 'BEGIN {print_line=0} $0 ~ version {print_line=1; next} $0 ~ /^## / {if(print_line==1) {print_line=0}} print_line' CHANGELOG.md)
          # Escape newlines for GitHub Actions using printf
          printf "CONTENT<<EOF\n%s\nEOF\n" "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
      
      - name: Push changes
        run: |
          git push --follow-tags origin main
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.NEW_VERSION }}
          release_name: Release v${{ steps.version.outputs.NEW_VERSION }}
          body: ${{ steps.changelog.outputs.CONTENT }}
          draft: false
          prerelease: false