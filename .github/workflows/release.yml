name: Auto Release
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Get release type from labels
        id: release-type
        run: |
          RELEASE_TYPE="patch"  # Default
          if echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q '"major"'; then
            RELEASE_TYPE="major"
          elif echo "${{ toJson(github.event.pull_request.labels) }}" | grep -q '"minor"'; then
            RELEASE_TYPE="minor"
          fi
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
      
      - name: Release with standard-version
        id: release
        run: |
          # Run the actual release command to update the changelog and create the tag
          npm run release -- --release-as ${{ steps.release-type.outputs.RELEASE_TYPE }} --no-verify
          
      - name: Generate release notes
        id: generate-notes
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          if [[ -n "$NEW_VERSION" ]]; then
            CHANGELOG_CONTENT=$(sed -n "/## \[$NEW_VERSION\]/,/^## /p" CHANGELOG.md | sed '$d')
            echo "$CHANGELOG_CONTENT" > release-notes.md
            echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "CHANGELOG_CONTENT=${CHANGELOG_CONTENT}" >> $GITHUB_OUTPUT
          fi

      - name: Push changes
        run: |
          git push --follow-tags origin main
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ steps.generate-notes.outputs.NEW_VERSION }}
          release_name: Release v${{ steps.generate-notes.outputs.NEW_VERSION }}
          body: ${{ steps.generate-notes.outputs.CHANGELOG_CONTENT }}
          body_path: release-notes.md
          draft: false
          prerelease: false