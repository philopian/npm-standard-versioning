name: Build and Push Docker Image

on:
  workflow_dispatch:  # Allow manual triggering
  release:
    types: 
      - released
  workflow_run:
    workflows: ["Release"]
    types:
      - completed

env:
  DOCKER_IMAGE_NAME: pdotwdot/npm-standard-versioning  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup Node.js version 22
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22' 

    # Extract version from package.json
    - name: Extract version from package.json
      id: version
      run: |
        VERSION=$(jq -r '.version' package.json)
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    # Set up QEMU for multi-platform builds
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    # Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    # Check if Docker image with the version tag already exists
    - name: Check if Docker image exists
      id: check_image
      run: |
        IMAGE_EXISTS=$(docker manifest inspect ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }} > /dev/null 2>&1 && echo "true" || echo "false")
        echo "EXISTS=${IMAGE_EXISTS}" >> $GITHUB_OUTPUT

    # Build and push Docker image if it doesn't exist
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      if: steps.check_image.outputs.EXISTS == 'false'
      with:
        context: .
        platforms: "linux/amd64,linux/arm64"
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ${{ env.DOCKER_IMAGE_NAME }}:latest

    # Skip the build if the image already exists
    - name: Skip Build
      if: steps.check_image.outputs.EXISTS == 'true'
      run: echo "Docker image with version ${{ steps.version.outputs.VERSION }} already exists. Skipping build."
